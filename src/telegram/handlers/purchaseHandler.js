const { GasStation, FuelType, Voucher } = require('../../models');
const VoucherController = require('../controllers/voucherController');
const PaymentController = require('../controllers/paymentController');
const UserController = require('../controllers/userController');
const logger = require('../utils/logger');
const { Op } = require('sequelize');

module.exports = (bot, sessionService) => {
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏"
  bot.onText(/üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const user = await UserController.findUserByTelegramId(msg.from.id.toString());
      if (!user || !user.phone_number) {
        return bot.sendMessage(chatId, 
          '–î–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è —Ç–∞–ª–æ–Ω—ñ–≤ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä.',
          {
            reply_markup: {
              keyboard: [
                ['üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å'],
                ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
              ],
              resize_keyboard: true
            }
          }
        );
      }

      // –ü–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ê–ó–°
      const gasStations = await GasStation.findAll({
        where: { is_active: true }
      });
      
      if (gasStations.length === 0) {
        return bot.sendMessage(chatId, '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ä–µ–∂ –ê–ó–°.');
      }
      
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, { 
        state: 'selecting_gas_station',
        userId: user.id
      });
      
      const markup = {
        reply_markup: {
          keyboard: gasStations.map(station => [`‚õΩ ${station.name}`]).concat([['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']]),
          resize_keyboard: true
        }
      };
      
      await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ä–µ–∂—É –ê–ó–° –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è —Ç–∞–ª–æ–Ω—ñ–≤:', markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –ê–ó–°: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ê–ó–°
  bot.onText(/‚õΩ (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const stationName = match[1];
    const session = sessionService.get(chatId);

    if (!session || session.state !== 'selecting_gas_station') {
      return;
    }

    try {
      // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ê–ó–°
      const gasStation = await GasStation.findOne({
        where: { name: stationName, is_active: true }
      });

      if (!gasStation) {
        return bot.sendMessage(chatId, '–ú–µ—Ä–µ–∂—É –ê–ó–° –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        state: 'selecting_fuel_type',
        gasStationId: gasStation.id,
        stationName: gasStation.name
      });

      // –ü–æ—à—É–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–∞–ª–∏–≤–∞
      const availableFuelTypeIds = await Voucher.findAll({
        where: {
          gas_station_id: gasStation.id,
          owner_id: null,
          is_used: false,
          expiration_date: { [Op.gt]: new Date() }
        },
        attributes: ['fuel_type_id'],
        group: ['fuel_type_id'],
        raw: true
      }).then(vouchers => vouchers.map(v => v.fuel_type_id));

      // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–∞–ª–∏–≤–∞
      const availableFuelTypes = await FuelType.findAll({
        where: {
          id: { [Op.in]: availableFuelTypeIds },
          is_active: true
        },
        attributes: ['id', 'name']
      });

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
      const markup = {
        reply_markup: {
          keyboard: availableFuelTypes.map(type => [`‚ö° ${type.name}`]).concat([['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']]),
          resize_keyboard: true
        }
      };

      await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø–∞–ª—å–Ω–æ–≥–æ:', markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞
  bot.onText(/‚ö° (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const fuelTypeName = match[1];
    const session = sessionService.get(chatId);

    if (!session || session.state !== 'selecting_fuel_type') {
      return;
    }

    try {
      // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞
      const fuelType = await FuelType.findOne({
        where: {
          name: fuelTypeName,
          is_active: true
        }
      });

      if (!fuelType) {
        return bot.sendMessage(chatId, '–í–∏–¥ –ø–∞–ª—å–Ω–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        state: 'selecting_amount',
        fuelTypeId: fuelType.id,
        fuelTypeName: fuelType.name
      });

      // –ü–æ—à—É–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–±—Å—è–≥—ñ–≤
      const availableAmounts = await Voucher.findAll({
        where: {
          gas_station_id: session.gasStationId,
          fuel_type_id: fuelType.id,
          owner_id: null,
          is_used: false,
          expiration_date: { [Op.gt]: new Date() }
        },
        attributes: ['amount'],
        raw: true
      }).then(vouchers => [...new Set(vouchers.map(v => v.amount))]);

      if (availableAmounts.length === 0) {
        return bot.sendMessage(chatId, '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–ª–æ–Ω—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–¥—É –ø–∞–ª—å–Ω–æ–≥–æ.');
      }

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
      const markup = {
        reply_markup: {
          keyboard: availableAmounts.map(amount => [`üî¢ ${amount} –ª`]).concat([['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']]),
          resize_keyboard: true
        }
      };

      await bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ—Ç—Ä—ñ–≤:', markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –æ–±—Å—è–≥—É: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ—Ç—Ä—ñ–≤
  bot.onText(/üî¢ (\d+) –ª/, async (msg, match) => {
    const chatId = msg.chat.id;
    const amount = parseInt(match[1]);
    const session = sessionService.get(chatId);

    if (!session || session.state !== 'selecting_amount') {
      return;
    }

    try {
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        state: 'entering_quantity',
        amount: amount
      });

      // –ü–æ—à—É–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–ª–æ–Ω—ñ–≤
      const availableVouchers = await Voucher.findAll({
        where: {
          gas_station_id: session.gasStationId,
          fuel_type_id: session.fuelTypeId,
          amount: amount,
          owner_id: null,
          is_used: false,
          expiration_date: { [Op.gt]: new Date() }
        },
        include: [
          { model: GasStation, as: 'gasStation' },
          { model: FuelType, as: 'fuelType' }
        ]
      });

      if (availableVouchers.length === 0) {
        return bot.sendMessage(chatId, '–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–ª–æ–Ω—ñ–≤ –∑ —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.');
      }

      // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞–ª–æ–Ω
      const sampleVoucher = availableVouchers[0];
      
      let message = `–í–∏ –æ–±—Ä–∞–ª–∏ —Ç–∞–ª–æ–Ω–∏:\n\n`;
      message += `‚õΩ –ú–µ—Ä–µ–∂–∞: ${session.stationName}\n`;
      message += `‚ö° –ü–∞–ª—å–Ω–µ: ${session.fuelTypeName}\n`;
      message += `üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${amount} –ª\n`;
      message += `üí∞ –¶—ñ–Ω–∞: ${sampleVoucher.purchase_price} –≥—Ä–Ω –∑–∞ —Ç–∞–ª–æ–Ω\n`;
      message += `üìÖ –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó: –¥–æ ${new Date(sampleVoucher.expiration_date).toLocaleDateString('uk-UA')}\n\n`;
      message += `–î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–ª–æ–Ω—ñ–≤: ${availableVouchers.length}\n\n`;
      message += `–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–ª–æ–Ω—ñ–≤ (–≤—ñ–¥ 1 –¥–æ ${Math.min(availableVouchers.length, 20)}):`;

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        availableVouchers: availableVouchers,
        pricePerVoucher: sampleVoucher.purchase_price
      });

      const markup = {
        reply_markup: {
          keyboard: [['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']],
          resize_keyboard: true
        }
      };

      await bot.sendMessage(chatId, message, markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞–ª–æ–Ω—ñ–≤: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞–ª–æ–Ω—ñ–≤
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const session = sessionService.get(chatId);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
    if (!session || session.state !== 'entering_quantity') {
      return;
    }

    // –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥ —Ç–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    if (!text || text.startsWith('/') || text.startsWith('üîô') || isNaN(text)) {
      return;
    }

    try {
      const quantity = parseInt(text);
      const availableVouchers = session.availableVouchers;
      const maxQuantity = Math.min(availableVouchers.length, 20);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
      if (quantity <= 0 || quantity > maxQuantity) {
        return bot.sendMessage(
          chatId, 
          `–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–≤—ñ–¥ 1 –¥–æ ${maxQuantity}):`
        );
      }

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        state: 'confirming_purchase',
        quantity: quantity
      });

      // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
      const totalPrice = quantity * session.pricePerVoucher;
      
      // –í–∏–±—ñ—Ä —Ç–∞–ª–æ–Ω—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      const selectedVouchers = availableVouchers.slice(0, quantity);

      //–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      let message = `üí≥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n`;
      message += `‚õΩ –ú–µ—Ä–µ–∂–∞: ${session.stationName}\n`;
      message += `‚ö° –ü–∞–ª—å–Ω–µ: ${session.fuelTypeName}\n`;
      message += `üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${session.amount} –ª\n`;
      message += `üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–ª–æ–Ω—ñ–≤: ${quantity} —à—Ç\n`;
      message += `üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${totalPrice} –≥—Ä–Ω\n\n`;
      message += `–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É"`;

      // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞–ª–æ–Ω—ñ–≤ –≤ —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        selectedVouchers: selectedVouchers,
        totalPrice: totalPrice
      });

      const markup = {
        reply_markup: {
          keyboard: [
            ['‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É'],
            ['‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏'],
            ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
          ],
          resize_keyboard: true
        }
      };

      await bot.sendMessage(chatId, message, markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–∞–ª–æ–Ω—ñ–≤: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
  bot.onText(/‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É/, async (msg) => {
    const chatId = msg.chat.id;
    const session = sessionService.get(chatId);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
    if (!session || session.state !== 'confirming_purchase') {
      return;
    }

    try {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      const transaction = await PaymentController.createTransaction(
        session.userId,
        session.selectedVouchers,
        msg.from.phone_number
      );

      // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É
      await bot.sendMessage(
        chatId, 
        `üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: ${transaction.payment_url}`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏', url: transaction.payment_url }]
            ]
          }
        }
      );

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, {
        state: 'awaiting_payment',
        transactionId: transaction.transaction_id
      });
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
  bot.onText(/‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏/, async (msg) => {
    const chatId = msg.chat.id;
    
    // –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
    sessionService.delete(chatId);
    
    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await bot.sendMessage(chatId, 
      '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', 
      {
        reply_markup: {
          keyboard: [
            ['üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω'],
            ['üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏'],
            ['üé´ –ú–æ—ó —Ç–∞–ª–æ–Ω–∏'],
            ['üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å'],
            ['ü§ù –°—Ç–∞—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º']
          ],
          resize_keyboard: true
        }
      }
    );
  });

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const session = sessionService.get(chatId);

    if (!session || !session.transactionId) {
      return bot.sendMessage(chatId, '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.');
    }

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      const transactionStatus = await PaymentController.checkPaymentStatus(
        session.transactionId
      );

      let statusMessage = '';
      switch (transactionStatus.payment_status) {
        case 'pending':
          statusMessage = '‚è≥ –ü–ª–∞—Ç—ñ–∂ –æ—á—ñ–∫—É—î –Ω–∞ –æ–±—Ä–æ–±–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–µ—Ä—à—ñ—Ç—å –æ–ø–ª–∞—Ç—É.';
          break;
        case 'paid':
          statusMessage = '‚úÖ –ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ —Å–ø–ª–∞—á–µ–Ω–æ! –¢–∞–ª–æ–Ω–∏ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É.';
          // –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
          sessionService.delete(chatId);
          break;
        case 'failed':
          statusMessage = '‚ùå –ü–ª–∞—Ç—ñ–∂ –Ω–µ –≤–¥–∞–≤—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.';
          // –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
          sessionService.delete(chatId);
          break;
        default:
          statusMessage = '‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É.';
      }

      await bot.sendMessage(chatId, statusMessage, {
        reply_markup: {
          keyboard: [
            ['üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏'],
            ['üé´ –ú–æ—ó —Ç–∞–ª–æ–Ω–∏'],
            ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É: ${error.message}`);
      await bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ webhook –≤—ñ–¥ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
  bot.use(async (msg, next) => {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ webhook-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      if (msg.webhook_payment) {
        const result = await PaymentController.handlePaymentWebhook(msg.webhook_payment);
        
        if (result) {
          const transaction = await Transaction.findByPk(msg.webhook_payment.transaction_id);
          const user = await User.findByPk(transaction.user_id);

          // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
          if (user) {
            await bot.sendMessage(user.telegram_id, 
              transaction.status === 'paid' 
                ? '‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ!' 
                : '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–ø–ª–∞—Ç–æ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.'
            );
          }
        }
      }
      next();
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: ${error.message}`);
      next();
    }
  });
};