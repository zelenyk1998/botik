const { GasStation, Price, FuelType } = require('../../models');
const logger = require('../utils/logger');

module.exports = (bot, sessionService) => {
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω"
  bot.onText(/üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –ü–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ê–ó–°
      const gasStations = await GasStation.findAll({
        where: { is_active: true }
      });
      
      if (gasStations.length === 0) {
        return bot.sendMessage(chatId, '–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–µ—Ä–µ–∂ –ê–ó–°.');
      }
      
      let message = 'üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø–∞–ª—å–Ω–µ:\n\n';
      
      // –ü–µ—Ä–µ–±—ñ—Ä –∫–æ–∂–Ω–æ—ó –ê–ó–°
      for (const station of gasStations) {
        message += `‚õΩ ${station.name}\n`;
        
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω –¥–ª—è –ê–ó–°
        const prices = await Price.findAll({
          where: { 
            gas_station_id: station.id,
            is_active: true
          },
          include: [{
            model: FuelType, 
            as: 'fuelType',
            where: { is_active: true }
          }]
        });
        
        if (!prices || prices.length === 0) {
          message += '   –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ü—ñ–Ω\n\n';
          continue;
        }
        
        // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω –∑–∞ —Ç–∏–ø–æ–º –ø–∞–ª—å–Ω–æ–≥–æ
        const pricesByFuelType = {};
        for (const price of prices) {
          if (!pricesByFuelType[price.fuelType.name]) {
            pricesByFuelType[price.fuelType.name] = [];
          }
          pricesByFuelType[price.fuelType.name].push(price);
        }
        
        // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ü—ñ–Ω –∑–∞ —Ç–∏–ø–∞–º–∏ –ø–∞–ª—å–Ω–æ–≥–æ
        for (const [fuelTypeName, fuelPrices] of Object.entries(pricesByFuelType)) {
          message += `   üîπ ${fuelTypeName}:\n`;
          for (const price of fuelPrices) {
            message += `      ${price.amount} –ª - ${price.price} –≥—Ä–Ω\n`;
          }
        }
        
        message += '\n';
      }
      
      message += '–î–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è —Ç–∞–ª–æ–Ω—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏"';
      
      const markup = {
        reply_markup: {
          keyboard: [
            ['üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏'],
            ['üé´ –ú–æ—ó —Ç–∞–ª–æ–Ω–∏'],
            ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
          ],
          resize_keyboard: true
        }
      };
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, { state: 'price_monitoring' });
      
      await bot.sendMessage(chatId, message, markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ü—ñ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ü—ñ–Ω
  
  // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω –º—ñ–∂ –ê–ó–°
  bot.onText(/üîÑ –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ü—ñ–Ω–∏/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–∞–ª–∏–≤–∞
      const fuelTypes = await FuelType.findAll({
        where: { is_active: true }
      });
      
      let comparisonMessage = 'üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω –ø–æ –º–µ—Ä–µ–∂–∞—Ö –ê–ó–°:\n\n';
      
      // –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞
      for (const fuelType of fuelTypes) {
        comparisonMessage += `‚ö° ${fuelType.name}:\n`;
        
        // –ü–æ—à—É–∫ –Ω–∞–π–Ω–∏–∂—á–∏—Ö —Ç–∞ –Ω–∞–π–≤–∏—â–∏—Ö —Ü—ñ–Ω
        const stations = await GasStation.findAll({
          include: [{
            model: Price,
            as: 'prices',
            where: { 
              fuel_type_id: fuelType.id,
              is_active: true 
            },
            required: true
          }],
          attributes: ['name']
        });
        
        const prices = stations.map(station => ({
          stationName: station.name,
          price: station.prices[0].price
        }));
        
        const sortedPrices = prices.sort((a, b) => a.price - b.price);
        
        comparisonMessage += `   üü¢ –ù–∞–π–¥–µ—à–µ–≤—à–µ: ${sortedPrices[0].stationName} - ${sortedPrices[0].price} –≥—Ä–Ω\n`;
        comparisonMessage += `   üî¥ –ù–∞–π–¥–æ—Ä–æ–∂—á–µ: ${sortedPrices[sortedPrices.length - 1].stationName} - ${sortedPrices[sortedPrices.length - 1].price} –≥—Ä–Ω\n\n`;
      }
      
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
      const markup = {
        reply_markup: {
          keyboard: [
            ['üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏'],
            ['üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω'],
            ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
          ],
          resize_keyboard: true
        }
      };
      
      await bot.sendMessage(chatId, comparisonMessage, markup);
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ —Ü—ñ–Ω: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ —Ü—ñ–Ω.');
    }
  });
};