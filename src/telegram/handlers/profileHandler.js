const UserController = require('../controllers/userController');
const logger = require('../utils/logger');

module.exports = (bot, sessionService) => {
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"
  bot.onText(/üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const user = await UserController.findUserByTelegramId(msg.from.id.toString());
      
      if (!user) {
        return bot.sendMessage(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start');
      }
      
      // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å
      let message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å*\n\n`;
      message += `–Ü–º'—è: ${user.first_name} ${user.last_name || ''}\n`;
      message += `–¢–µ–ª–µ–≥—Ä–∞–º ID: ${user.telegram_id}\n`;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      if (user.phone_number) {
        message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n`;
        
        await bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              ['üì± –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω'],
              ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
            ],
            resize_keyboard: true
          }
        });
      } else {
        message += `–¢–µ–ª–µ—Ñ–æ–Ω: –ù–µ –≤–∫–∞–∑–∞–Ω–æ\n\n`;
        message += `–î–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.`;
        
        await bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              [{
                text: 'üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                request_contact: true
              }],
              ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
            ],
            resize_keyboard: true
          }
        });
      }
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, { state: 'profile_view' });
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—é: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  bot.on('contact', async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
      if (msg.contact.user_id.toString() !== msg.from.id.toString()) {
        return bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.');
      }
      
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      const updatedUser = await UserController.addPhoneNumber(
        msg.from.id.toString(), 
        msg.contact.phone_number
      );
      
      if (updatedUser) {
        await bot.sendMessage(chatId, 
          '‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.', 
          {
            reply_markup: {
              keyboard: [
                ['üîç –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—ñ–Ω'],
                ['üõí –ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∏'],
                ['üé´ –ú–æ—ó —Ç–∞–ª–æ–Ω–∏'],
                ['üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å'],
                ['ü§ù –°—Ç–∞—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º']
              ],
              resize_keyboard: true
            }
          }
        );
      }
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.');
    }
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  bot.onText(/üì± –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω/, async (msg) => {
    const chatId = msg.chat.id;
    
    try {
      await bot.sendMessage(chatId, 
        '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', 
        {
          reply_markup: {
            keyboard: [
              [{
                text: 'üì± –û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                request_contact: true
              }],
              ['üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é']
            ],
            resize_keyboard: true
          }
        }
      );
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      sessionService.update(chatId, { state: 'update_phone' });
    } catch (error) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${error.message}`);
      await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  });
};